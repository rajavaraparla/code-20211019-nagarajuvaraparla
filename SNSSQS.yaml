AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Sample Template SNSToSQS: This Template creates an
  SNS topic that can send messages to SQS queues with appropriate permissions
  for one IAM user to publish to the topic and another to read messages from the queues.
  MySNSTopic is set up to publish to two subscribed endpoints, which are SQS queue
  (MyQueue1). MyPublishUser is an IAM user that can publish to MySNSTopic
  using the Publish API. MyTopicPolicy assigns that permission to MyPublishUser. MyQueueUser
  is an IAM user that can read messages from the SQS queue. MyQueuePolicy assigns
  those permissions to MyQueueUser. It also assigns permission for MySNSTopic to publish
  its notifications to the queue. The template creates access keys for the two
  IAM users with MyPublishUserKey and MyQueueUserKey. ***Warning*** you will be billed
  for the AWS resources used if you create a stack from this template. This also creates a Lambda
  Role that will subscribe to the SQS Queue and output the message to an s3 bucket in json format'
Parameters:
  MyPublishUserPassword:
    NoEcho: 'true'
    Type: String
    Description: Password for the IAM user MyPublishUser
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  MyQueueUserPassword:
    NoEcho: 'true'
    Type: String
    Description: Password for the IAM user MyQueueUser
    MinLength: '1'
    MaxLength: '41'
    ConstraintDescription: password must be between 1 and 41 characters.
Resources:
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !GetAtt 'MyQueue1.Arn'
          Protocol: sqs
  MyQueue1:
    Type: AWS::SQS::Queue
    Properties:
       VisibilityTimeout: 120
  MyPublishUser:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password: !Ref 'MyPublishUserPassword'
  MyPublishUserKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref 'MyPublishUser'
  MyPublishTopicGroup:
    Type: AWS::IAM::Group
    Properties:
      Policies:
        - PolicyName: MyTopicGroupPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref 'MySNSTopic'
  AddUserToMyPublishTopicGroup:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref 'MyPublishTopicGroup'
      Users:
        - !Ref 'MyPublishUser'
  MyQueueUser:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password: !Ref 'MyQueueUserPassword'
  MyQueueUserKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref 'MyQueueUser'
  MyRDMessageQueueGroup:
    Type: AWS::IAM::Group
    Properties:
      Policies:
        - PolicyName: MyQueueGroupPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:ReceiveMessage
                Resource:
                  - !GetAtt 'MyQueue1.Arn'
  AddUserToMyQueueGroup:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref 'MyRDMessageQueueGroup'
      Users:
        - !Ref 'MyQueueUser'
  MyQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Id: MyQueuePolicy
        Statement:
          - Sid: Allow-SendMessage-To-Both-Queues-From-SNS-Topic
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - sqs:SendMessage
            Resource: '*'
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref 'MySNSTopic'
      Queues:
        - !Ref 'MyQueue1'
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:*
              Resource: arn:aws:logs:*:*:*
        - PolicyName: allowS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:GetObject
              - s3:PutObject
              Resource: arn:aws:s3:::*
        - PolicyName: allowSqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ChangeMessageVisibility
              Resource: !GetAtt MyQueue1.Arn

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 60
      MemorySize: 512
      Code:
        ZipFile: |
          import json
          import boto3
          from datetime import datetime
          def lambda_handler(event, context):
              ObjKey = str(datetime.today().timestamp())
              s3 = boto3.client("s3")
              data = json.loads(event["Records"][0]["body"])
              s3.put_object(Bucket="sqs-demo-turorial-639232547460", Key=ObjKey+".json", Body=json.dumps(data))
              print(event)
              # TODO implement
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }

  LambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt MyQueue1.Arn
      FunctionName: !GetAtt LambdaFunction.Arn

Outputs:
  MySNSTopicTopicARN:
    Value: !Ref 'MySNSTopic'
    Description: Topic ARN of newly created SNS topic
  MyQueue1Info:
    Value: !Join
      - ' '
      - - 'ARN:'
        - !GetAtt 'MyQueue1.Arn'
        - 'URL:'
        - !Ref 'MyQueue1'
    Description: Queue1 details
  MyPublishUserInfo:
    Description: Information for publisher
    Value: !Join
      - ' '
      - - 'ARN:'
        - !GetAtt 'MyPublishUser.Arn'
        - 'Access Key:'
        - !Ref 'MyPublishUserKey'
        - 'Secret Key:'
        - !GetAtt 'MyPublishUserKey.SecretAccessKey'
  MyQueueUserInfo:
    Description: Information for consumer
    Value: !Join
      - ' '
      - - 'ARN:'
        - !GetAtt 'MyQueueUser.Arn'
        - 'Access Key:'
        - !Ref 'MyQueueUserKey'
        - 'Secret Key:'
        - !GetAtt 'MyQueueUserKey.SecretAccessKey'